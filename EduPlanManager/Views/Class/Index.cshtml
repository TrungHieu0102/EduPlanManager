@model IEnumerable<EduPlanManager.Models.DTOs.Class.ClassDTO>

@{
    ViewData["Title"] = "Danh sách Lớp học";
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
}
<h1 class="text-center text-primary my-4">@ViewData["Title"]</h1>
<form method="get" class="mb-4">
    <div class="mb-3">
        <input type="text" id="searchTerm" name="searchTerm" placeholder="Tìm theo mã hoặc tên lớp học" value="@ViewData["SearchTerm"]" class="form-control shadow-sm" list="classList" oninput="updateDatalist()" />

        <datalist id="classList">
        </datalist>
    </div>

    <button type="submit" class="btn text-success-emphasis bg-success-subtle ">Tìm kiếm</button>
    <a href="@Url.Action("Create")" class="btn text-primary-emphasis bg-primary-subtle">Thêm mới lớp học</a>

</form>

<table class="table table-bordered">
    <thead>
        <tr class="align-middle">
            <th>
                <input type="checkbox" id="selectAll" onclick="toggleSelectAll()" />
            </th>
            <th scope="col">
                <button class="btn btn-link p-0 text-decoration-none" onclick="sortTable(1)">
                    Mã lớp <i class="bi bi-arrow-down-up"></i>
                </button>
            </th>
            <th scope="col">
                <button class="btn btn-link p-0 text-decoration-none" onclick="sortTable(2)">
                    Tên lớp <i class="bi bi-arrow-down-up"></i>
                </button>
            </th>
            <th scope="col">
                <button class="btn btn-link p-0 text-decoration-none" onclick="sortTable(3)">
                    Số lượng học sinh <i class="bi bi-arrow-down-up"></i>
                </button>
            </th>
            <th scope="col">
                <button class="btn btn-link p-0 text-decoration-none" onclick="sortTable(4)">
                    Số lượng giáo viên <i class="bi bi-arrow-down-up"></i>
                </button>
            </th>
            <th scope="col">Hành động</th>
        </tr>
    </thead>
    <tbody id="tableBody">
        <!-- Các hàng của bảng -->
        @foreach (var item in Model)
        {
            <tr class="align-middle">
                <td>
                    <input type="checkbox" class="selectRow" data-id="@item.Id" onclick="toggleDeleteButton()" />
                </td>
                <td>@item.Code</td>
                <td>@item.ClassName</td>
                <td>@item.StudentCount</td>
                <td>@item.TeacherCount</td>
                <td class="d-flex justify-content-center align-items-center">
                    <div class="d-flex align-items-center">
                        <a href="@Url.Action("Detail", new { id = item.Id })" class="badge rounded-pill text-primary-emphasis bg-primary-subtle border border-primary align-items-center me-2">Xem chi tiết</a>
                        <div class="dropdown">
                            <button class="btn btn-light btn-sm shadow-none dropdown-toggle border-0 bg-transparent" type="button" id="dropdownMenuButton-@item.Id" data-bs-toggle="dropdown" aria-expanded="false"></button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton-@item.Id">
                                <li>
                                    <a class="dropdown-item badge rounded-pill text-primary-emphasis align-items-center" href="@Url.Action("Update", new { id = item.Id })">
                                        <i class="bi bi-pencil"></i> Sửa
                                    </a>
                                </li>
                                <li>
                                    <form action="@Url.Action("Delete", new { id = item.Id })" method="post" style="display: inline;">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="dropdown-item badge rounded-pill text-danger-emphasis align-items-center">
                                            <i class="bi bi-trash"></i> Xóa
                                        </button>
                                    </form>
                                </li>
                                <li>
                                    <a class="dropdown-item badge rounded-pill text-primary-emphasis align-items-center" href="@Url.Action("GetUsersWithoutClass","Admin", new { id = item.Id })">
                                        <i class="bi bi-pencil"></i> Thêm sinh viên vào lớp
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>



<nav>
    <div class="d-flex justify-content-between align-items-center">
        <!-- Phân trang -->
        <ul class="pagination pagination-circle">
            @for (int i = 1; i <= (int)ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { searchTerm = ViewData["SearchTerm"], pageNumber = i })">
                        @i
                    </a>
                </li>
            }
        </ul>

        <!-- Nút Xóa Range -->
        <button type="button" id="deleteRangeBtn" class="btn btn-danger" style="display: none;" onclick="deleteSelected()">Xóa</button>
    </div>
</nav>


<script>
    var classFilter = @Html.Raw(Json.Serialize(Model.Select(s => s.ClassName).ToList()))

        function updateDatalist() {
            const searchTerm = document.getElementById('searchTerm').value;
            const classList = document.getElementById('classList');

            classList.innerHTML = "";

            if (searchTerm) {
                var filteredClasses = classFilter.filter(classFilter => classFilter.toLowerCase().includes(searchTerm.toLowerCase()));

                filteredClasses.forEach(classModel => {
                    classList.innerHTML += `<option value="${classModel}"></option>`;
                });
            }
        }
    function toggleSelectAll() {
        var selectAllCheckbox = document.getElementById("selectAll");
        var checkboxes = document.querySelectorAll(".selectRow");
        checkboxes.forEach(function (checkbox) {
            checkbox.checked = selectAllCheckbox.checked;
        });
        toggleDeleteButton();
    }
    function toggleDeleteButton() {
        var checkboxes = document.querySelectorAll(".selectRow");
        var selected = Array.from(checkboxes).some(checkbox => checkbox.checked);
        var deleteButton = document.getElementById("deleteRangeBtn");
        if (selected) {
            deleteButton.style.display = "inline-block";
        } else {
            deleteButton.style.display = "none";
        }
    }
    function deleteSelected() {
        // Lấy danh sách các ID môn học được chọn
        var selectedIds = [];
        var checkboxes = document.querySelectorAll(".selectRow:checked");
        checkboxes.forEach(function (checkbox) {
            selectedIds.push(checkbox.getAttribute("data-id"));
        });

        if (selectedIds.length > 0) {
            var form = document.createElement("form");
            form.method = "POST";
            form.action = "@Url.Action("DeleteRange")"; 

            var input = document.createElement("input");
            input.type = "hidden";
            input.name = "selectedIds";  
            input.value = selectedIds.join(','); 
            form.appendChild(input);

            document.body.appendChild(form);
            form.submit();
        } else {
            alert("Vui lòng chọn ít nhất một môn học để xóa!");
        }
    }
    function sortTable(columnIndex) {
        const tableBody = document.getElementById("tableBody");
        const rows = Array.from(tableBody.getElementsByTagName("tr"));
        let ascending = tableBody.dataset.sortOrder !== "asc";

        rows.sort((a, b) => {
            const aValue = a.children[columnIndex].innerText.trim().toLowerCase();
            const bValue = b.children[columnIndex].innerText.trim().toLowerCase();

            if (!isNaN(aValue) && !isNaN(bValue)) {
                return ascending ? aValue - bValue : bValue - aValue;
            }

            return ascending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
        });

        tableBody.innerHTML = "";
        rows.forEach(row => tableBody.appendChild(row));

        tableBody.dataset.sortOrder = ascending ? "asc" : "desc";
    }



</script>
